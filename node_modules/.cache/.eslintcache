[{"/Users/jack/CodeProjects/Escrow-Web/src/index.js":"1","/Users/jack/CodeProjects/Escrow-Web/src/reportWebVitals.js":"2","/Users/jack/CodeProjects/Escrow-Web/src/App.js":"3","/Users/jack/CodeProjects/Escrow-Web/src/config.js":"4"},{"size":544,"mtime":1639330305094,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1639328132194,"results":"7","hashOfConfig":"6"},{"size":13001,"mtime":1639821653539,"results":"8","hashOfConfig":"6"},{"size":10727,"mtime":1639784083584,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"jynu20",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/jack/CodeProjects/Escrow-Web/src/index.js",[],["20","21"],"/Users/jack/CodeProjects/Escrow-Web/src/reportWebVitals.js",[],"/Users/jack/CodeProjects/Escrow-Web/src/App.js",["22","23","24","25"],"import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport './App.css'; \nimport {DAI_ADDRESS, ERC20_ABI, ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS} from './config'\nclass App extends Component{\n  componentWillMount(){\n    this.loadBlockchainData()\n  }\n\n  \n\n\n  async loadBlockchainData(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    window.web3 = new Web3(window.ethereum);\n    await window.ethereum.enable();\n\n    const network = await web3.eth.net.getNetworkType()\n    console.log(\"network\", network)\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    var balance = await web3.eth.getBalance(accounts[0])\n    balance = web3.utils.fromWei(balance, 'ether')\n    this.setState({balance: balance})\n    const daicontract = new web3.eth.Contract(ERC20_ABI, DAI_ADDRESS)\n    \n    var daibalance= await daicontract.methods.balanceOf(accounts[0]).call()\n    var contractbalance = await daicontract.methods.balanceOf(ESCROWCONTRACT_ADDRESS).call()\n    this.setState({daibalance: daibalance})\n\n    this.setState({ProposalBalance: contractbalance})\n    \n    //daicontract.methods.approve('0xFaCA1b61C03e4355Ce6BB0CeB7efB9E1709E9369', 9999999 ).send({from: accounts[0]})\n  }\n\n\n\n  constructor(props){\n    super(props)\n    this.state = {account: ''}\n    this.state = {balance: ''}\n    this.state ={daibalance: ''}\n    this.state = {ProposalAddress: ''}\n    this.state = {ProposalAmount: ''}\n    this.state = {ProposalRequest: ''}\n    this.state = {FunderAmount: ''}\n    this.state = {FunderIdentifier: ''}\n    this.state = {ProposalBalance: ''}\n    this.state = {FunderVote: ''}\n    this.state = {ProposalDescription: ''}\n    this.state = {RoundDescription: ''}\n    this.state = {HashTest: ''}\n    this.state = {HashStatus: ''}\n    this.state = {RealProposalAmount: ''}\n    this.state = {ProposalAmountFunded: ''}\n    this.state = {ProposalRound: ''}\n    this.state = {ProposalVote: ''}\n    this.state = {ProposalFundsSpent: ''}\n    this.state = {RealProposalDescription: ''}\n    this.state = {RealRoundDescription: ''}\n    this.state= {jeff: ''}\n  }\n\n  async SubmitProposal(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    var balance = await web3.eth.getBalance(accounts[0])\n    \n    escrowcontract.methods.MakeProposal(this.state.ProposalAmount, this.state.ProposalAddress, this.state.ProposalDescription).send({from: accounts[0]})\n  }\n\n  async SubmitRequest(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    var balance = await web3.eth.getBalance(accounts[0])\n    \n    escrowcontract.methods.RequestAmounts(this.state.ProposalRequest, this.state.account, this.state.RoundDescription).send({from: accounts[0]})\n  }\n\n  async FundProposal(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    const daicontract = new web3.eth.Contract(ERC20_ABI, DAI_ADDRESS)\n    var FunderAmount = this.state.FunderAmount.concat('000000000000000000')\n    daicontract.methods.approve(ESCROWCONTRACT_ADDRESS, FunderAmount ).send({from: accounts[0]})\n    escrowcontract.methods.FundProposal(this.state.FunderAmount, this.state.ProposalAddress, this.state.FunderIdentifier).send({from: accounts[0]})\n\n  }\n\n  async Vote(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    escrowcontract.methods.vote(this.state.FunderVote, this.state.ProposalAddress, this.state.FunderIdentifier).send({from: accounts[0]})\n\n  }\n\n  async ReleaseFunds(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    escrowcontract.methods.releasefunds(this.state.ProposalAddress).send({from: accounts[0]})\n  }\n  async ReturnFunds(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    escrowcontract.methods.ReturnFunds(this.state.FunderIdentifier, this.state.ProposalAddress).send({from: accounts[0]})\n  }\n  async GetProposalDetails(){\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:3000\")\n    const accounts = await web3.eth.getAccounts()\n    const escrowcontract = new web3.eth.Contract(ESCROWCONTRACT_ABI, ESCROWCONTRACT_ADDRESS)\n    \n    const ProposalDetails = await escrowcontract.methods.GetProposalDetails(this.state.ProposalAddress).call()\n    \n    var RoundDescription = await escrowcontract.methods.GetRoundDescription(this.state.ProposalAddress).call()\n    var ProposalDescription = await escrowcontract.methods.GetDescription(this.state.ProposalAddress).call()\n\n    this.setState({RealRoundDescription: RoundDescription})\n    this.setState({RealProposalDescription: ProposalDescription})\n    this.setState({RealProposalAmount: ProposalDetails[0]})\n    this.setState({ProposalAmountFunded: ProposalDetails[1]})\n    this.setState({ProposalRound: ProposalDetails[2]})\n    this.setState({ProposalVote: ProposalDetails[3]})\n    this.setState({ProposalFundsSpent: ProposalDetails[4]})\n\n  }\n\n\n  render(){\n    return(\n    <div className=\"container\">\n      <h1>My Details </h1>\n      <p>my acc: {this.state.account}</p>\n      <p>my bal: {this.state.balance}</p>\n      <p> my dai bal: {this.state.daibalance}</p>\n      <h1>Proposal Details</h1>\n      <p> Proposal Description {this.state.RealProposalDescription}</p> \n      <p> Round Description {this.state.RealRoundDescription}</p>\n      <p> Proposal Address: {this.state.ProposalAddress}</p>\n      <p> Proposal Amount Request: {this.state.RealProposalAmount}</p>\n      <p> Proposal Amount Funded: {this.state.ProposalAmountFunded}</p>\n      <p> Proposal Round Amount: {this.state.ProposalRound}</p>\n      <p> Proposal Vote: {this.state.ProposalVote}</p>\n      <p> Proposal Funds Spent: {this.state.ProposalFundsSpent}</p>\n      <br></br>\n      \n      <h3>Get Proposal Details</h3>\n      <br></br>\n      <form onSubmit={(event) => {\n        event.preventDefault()\n        this.setState({ProposalAddress: event.target[0].value})\n        this.GetProposalDetails()\n\n      }}>\n         <input\n            id=\"newProposalAddress\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n<input type=\"submit\"  />\n</form>\n<br></br>\n      <h3>Make Proposal</h3>\n      <br></br>\n      \n      \n\n        <form onSubmit={(event) => {\n          event.preventDefault()\n         this.setState({ProposalAddress: event.target[0].value})\n         this.setState({ProposalAmount: event.target[1].value})\n         this.setState({ProposalDescription: event.target[2].value})\n         this.SubmitProposal()\n        }}>\n          <input\n            id=\"newProposalAddress\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n           \n           <input\n            id=\"newProposalAmount\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Amount\"\n            required />\n\n            <input\n             id=\"newProposalDescription\"\n             type=\"text\"\n             className=\"form-control\"\n             placeholder=\"Proposal Description\"\n             required />\n          <input type=\"submit\"  />\n        </form>\n        <br></br>\n        <h3>Request Amounts</h3>\n        <br></br>\n\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          this.setState({ProposalRequest: event.target[0].value})\n          this.setState({RoundDescription: event.target[1].value})\n          this.SubmitRequest()\n        }}>\n        <input\n            id=\"newProposalRequest\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Round Request\"\n            required />\n            <input\n            id=\"newProposalRequest\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Round Description\"\n            required />\n            <input type=\"submit\"  />\n        </form>\n       <br></br>\n       <h3>Release Funds</h3>\n       <br></br>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          this.setState({ProposalAddress: event.target[0].value})\n          this.ReleaseFunds()\n        }}>\n        <input\n            id=\"newProposalRequest\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n            <input type=\"submit\"  />\n        </form>\n        <br></br>\n        <h1>Funder Interface</h1>\n        <br></br>\n        <h3>Fund Proposal</h3>\n        <br></br>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          this.setState({ProposalAddress: event.target[0].value})\n          this.setState({FunderAmount: event.target[1].value})\n          this.setState({FunderIdentifier: event.target[2].value})\n          this.FundProposal()\n        }}>\n        <input\n            id=\"FunderProposalAddress\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n            <input\n            id=\"FunderAmount\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Amount\"\n            required />\n            <input\n            id=\"FunderIdentifier\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Identifier\"\n            required />\n            <input type=\"submit\"  />\n\n            </form>\n            <br></br>\n            <h3>Vote on Proposal</h3>\n            <form onSubmit={(event) => {\n          event.preventDefault()\n          this.setState({ProposalAddress: event.target[0].value})\n          this.setState({FunderVote: event.target[1].value})\n          this.setState({FunderIdentifier: event.target[2].value})\n          this.Vote()\n        }}>\n        <input\n            id=\"FunderProposalAddress\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n            <input\n            id=\"FunderVote\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Vote (1 for positive 0 for negative)\"\n            required />\n            <input\n            id=\"FunderIdentifier\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Identifier\"\n            required />\n            <input type=\"submit\"  />\n\n            </form>\n            <br></br>\n            <h3>Return Funds</h3>\n            <br></br>\n            <form onSubmit={(event) => {\n          event.preventDefault()\n          this.setState({FunderIdentifier: event.target[0].value})\n          this.setState({ProposalAddress: event.target[1].value})\n          this.ReturnFunds()\n        }}>\n        <input\n            id=\"newProposalRequest\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Funder Identifier\"\n            required />\n        <input\n            id=\"ProposalAddress\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Proposal Address\"\n            required />\n            <input type=\"submit\"  />\n        </form>\n\n        <br></br>\n        <h1>Testing Hash</h1>\n        <br></br>\n        <form onSubmit={(event) => {\n          event.preventDefault()\n          \n          var string = Web3.utils.sha3(event.target[0].value)\n          \n          this.setState({HashTest: string})\n\n          var string1 = Web3.utils.sha3(event.target[1].value)\n\n          if(string1==string){\n            this.setState({HashStatus: 'statements match'})\n          } else {\n            this.setState({HashStatus: 'statements do not match'})\n          }\n\n        \n        }}>\n        <input\n            id=\"Hash Test\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Hash\"\n            required />\n\n        <input\n            id=\"Hash Tes\"\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Input\"\n            required />\n\n\n<input type=\"submit\"  />\n        </form>\n        <p> HashTest: {this.state.HashTest} </p>\n        <p> HashStatus: {this.state.HashStatus} </p>\n\n    </div>\n    )\n  }\n}\n\nexport default App;\n","/Users/jack/CodeProjects/Escrow-Web/src/config.js",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":68,"column":9,"nodeType":"32","messageId":"33","endLine":68,"endColumn":16},{"ruleId":"30","severity":1,"message":"31","line":77,"column":9,"nodeType":"32","messageId":"33","endLine":77,"endColumn":16},{"ruleId":"30","severity":1,"message":"34","line":115,"column":11,"nodeType":"32","messageId":"33","endLine":115,"endColumn":19},{"ruleId":"35","severity":1,"message":"36","line":342,"column":21,"nodeType":"37","messageId":"38","endLine":342,"endColumn":23},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'balance' is assigned a value but never used.","Identifier","unusedVar","'accounts' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]